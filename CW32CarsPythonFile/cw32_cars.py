# -*- coding: utf-8 -*-
"""CW32_cars.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NjmBmxSjEmM6CX4TBnsLmnx8VuD4wxcK
"""

# коллабные импорты
from google.colab import drive
from google.colab import files

!mkdir GD

drive.mount('/GD',force_remount=True)

!cp -r /GD/'My Drive'/cars.zip .

!unzip cars.zip

!ls cars

!mkdir longbox

!mkdir longbox/Avar

!mkdir longbox/Medical

!mkdir longbox/Nothing

!mkdir longbox/Post

!mkdir longbox/Tractor

!mkdir longbox/Truck

!mkdir longbox/01

!mkdir longbox/02

!mkdir longbox/03

!ls longbox

# копируем все каталоги
! cp -r longbox/ train/

# копируем все каталоги
! cp -r longbox/ test/

!ls test

!ls train



"""#1. выше мы создали каталоги из нашего датасета, разделили на тестовое и треин множества.

"""

import os, shutil
import random as rn

"""1. страшный код для 'longbox'

"""

#каталог источники
train_dirs = ['cars/01', 'cars/02','cars/03','cars/Avar','cars/Medical','cars/Post',
              'cars/Tractor','cars/Truck']
#каталог приемники
main_dir = 'longbox'
test_dirs =  [main_dir +'/01', main_dir + '/02',main_dir + '/03',main_dir + '/Avar',main_dir + '/Medical',main_dir + '/Post',
              main_dir + '/Tractor',main_dir + '/Truck']



# Страшный код
for i in range(len(train_dirs)):
    fnames = os.listdir(train_dirs[i])
    toCopy = len(fnames)//3

    filesToCopy = []
    for j in range(toCopy):
        filesToCopy.append(rn.choice(fnames))
    
    # cOPY
         
    for fi in filesToCopy:
        src = os.path.join(train_dirs[i],fi)
        dst = os.path.join(test_dirs[i], fi)
        shutil.copyfile(src,dst)

    
    for fi in filesToCopy:
        try:
            src = os.path.join(train_dirs[i],fi)
            os.remove(src)
            print(src+' deleted')
            #time.sleep(1)
        except:
            pass



"""2. страшный код для test"""

#каталог источники
train_dirs = ['cars/01', 'cars/02','cars/03','cars/Avar','cars/Medical','cars/Post',
              'cars/Tractor','cars/Truck']
#каталог приемники
main_dir = 'test'
test_dirs =  [main_dir +'/01', main_dir + '/02',main_dir + '/03',main_dir + '/Avar',main_dir + '/Medical',main_dir + '/Post',
              main_dir + '/Tractor',main_dir + '/Truck']

# Страшный код
for i in range(len(train_dirs)):
    fnames = os.listdir(train_dirs[i])
    toCopy = len(fnames)//3

    filesToCopy = []
    for j in range(toCopy):
        filesToCopy.append(rn.choice(fnames))
    
    # cOPY
         
    for fi in filesToCopy:
        src = os.path.join(train_dirs[i],fi)
        dst = os.path.join(test_dirs[i], fi)
        shutil.copyfile(src,dst)

    
    for fi in filesToCopy:
        try:
            src = os.path.join(train_dirs[i],fi)
            os.remove(src)
            print(src+' deleted')
            #time.sleep(1)
        except:
            pass



"""3. теперь проверяем выборочно, что мы все разложили по папкам"""

!ls longbox/02/

!ls test/02/

import tensorflow as tf
from tensorflow.keras import models
from tensorflow.keras import layers

import tensorflow as tf
import numpy as np
from tensorflow.keras import layers
from tensorflow.keras import models
from tensorflow.keras import optimizers
from tensorflow.keras.preprocessing import image
from tensorflow.keras import Input
from tensorflow.keras.preprocessing.image import ImageDataGenerator
#import os
import pandas as pd
import math
import numpy as np
import sys
import matplotlib.pyplot as plt

import pandas as pd
from tensorflow.keras.preprocessing import image
import numpy as np
import cv2

# Дебаты про выбор размера картинки для подачи на вход нейросети

Y = 126
X = 224

"""! ВНИМАНИЕ ! X ШИРИНА Y - ВЫСОТА. Смотрим из наших свойств в папке каринок.

"""



"""работает с IoU, БЕРЕМ 3 СЛОЯ

"""

inputs = Input(shape = (Y, X, 3))
#padding='same' Сохраняет размер свертки,что нам потом разворачивать сеть было удобно в обратную сторону в случае IoU.(это было в задаче с котами и собаками)
#У нас сейчас  прямая свертка, которая должна закончиться многоклассовым классификатором.(и мы убрали padding='same')
conv1_1 = layers.Conv2D(16, (3, 3), activation='relu')(inputs)
conv1_2 = layers.Conv2D(16, (3, 3), activation='relu')(conv1_1)
pool1 = layers.MaxPooling2D(pool_size=(2, 2))(conv1_2)

conv2_1 = layers.Conv2D(32, (3, 3), activation='relu')(pool1)
conv2_2 = layers.Conv2D(32, (3, 3), activation='relu')(conv2_1)
pool2 = layers.MaxPooling2D(pool_size=(2, 2))(conv2_2)

conv3_1 = layers.Conv2D(64, (3, 3), activation='relu')(pool2)
conv3_2 = layers.Conv2D(64, (3, 3), activation='relu')(conv3_1)
pool3 = layers.MaxPooling2D(pool_size=(2, 2))(conv3_2)
#
#flat слой нужен для перехода с одного типа сети (сверточной) на другой ( полносвязный)
flat = layers.Flatten()(pool3)

drop = layers.Dropout(0.35) (flat)
# drop надо для погашения количества весов, так как у нас не вышло без него переобучение вышло

result = layers.Dense(9,activation = 'softmax')(drop)
# softmax выдает вектор веротяности,что чему принадлежит


# формируем модель
model = models.Model(inputs=inputs, outputs=result)

#наша метрика metrics = ['acc'] здесь , а loss = 'categorical_crossentropy'
model.compile(loss = 'categorical_crossentropy',
             optimizer=optimizers.Adam(lr=1e-3), metrics = ['acc'])

model.summary()

"""4. Время ГЕНЕРАТОРОВ!

"""

train_datagen = ImageDataGenerator(rescale = 1./255)
                            
train_generator = train_datagen.flow_from_directory('cars',
                                                   target_size = (Y, X),
                                                   batch_size = 64,
                                                   class_mode = 'categorical')


test_datagen = ImageDataGenerator(rescale = 1./255)
                            
test_generator = test_datagen.flow_from_directory('longbox',
                                                   target_size = (Y, X),
                                                   batch_size = 64,
                                                   class_mode = 'categorical')



"""5. генератор готов и теперь мы обучаем модель


"""

from tensorflow.keras.callbacks import  ModelCheckpoint
# наша сохраняшка
filepath = "car_net_simple.h5"
chp = ModelCheckpoint(filepath, monitor = 'val_acc', verbose = 1, save_best_only = True, mode = 'max')

history = model.fit_generator(train_generator,
                         steps_per_epoch = 11464//64,
                         epochs = 5,
                         callbacks=[chp],
                         validation_data = test_generator,
                         validation_steps = 4186//64)





"""6. попытка номер вторая переделать чтобы улучшить результат"""

#train_datagen = ImageDataGenerator(rescale = 1./255)
train_datagen = ImageDataGenerator(rescale = 1./255,
                                   rotation_range = 25,
                                   width_shift_range = 0.15,
                                   height_shift_range = 0.15,
                                   shear_range = 0.15,
                                   zoom_range = 0.3,
                                   fill_mode = 'nearest')
                                                       
train_generator = train_datagen.flow_from_directory('cars',
                                                   target_size = (Y, X),
                                                   batch_size = 64,
                                                   class_mode = 'categorical')


test_datagen = ImageDataGenerator(rescale = 1./255)
                            
test_generator = test_datagen.flow_from_directory('longbox',
                                                   target_size = (Y, X),
                                                   batch_size = 64,
                                                   class_mode = 'categorical')

# наша сохраняшка
from tensorflow.keras.callbacks import  ModelCheckpoint

filepath = "car_net_simple_aug.h5"
chp = ModelCheckpoint(filepath, monitor = 'val_acc', verbose = 1, save_best_only = True, mode = 'max')

history = model.fit_generator(train_generator,
                         steps_per_epoch = 11464//64,
                         epochs = 5,
                         callbacks=[chp],
                         validation_data = test_generator,
                         validation_steps = 4186//64)



!cp car_net_simple.h5 /GD/'My Drive'/car_net_simple.h5
!cp car_net_simple_aug.h5 /GD/'My Drive'/car_net_simple_aug.h5

train_generator.class_indices